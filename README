This is a python script to generate maps of location of cities.

usage: drawMap.py [-h] [--all | --no-all] [--actives | --no-actives]
                  [--guilds | --no-guilds] [--guild-name GUILD_NAME]
                  [--player-guild PLAYER_GUILD] [--overlap | --no-overlap]
                  [--path PATH]
                  filename

Draw maps of players from json database.

positional arguments:
  filename                      json file containing all players

optional arguments:
  -h, --help                    show this help message and exit
  --all, --no-all               Draw map of all players (default: True)
  --actives, --no-actives       Draw map of activity (default: True)
  --guilds, --no-guilds         Draw maps of each guild (default: False)
  --guild-name GUILD_NAME       Draw maps of the specified guild
  --player-guild PLAYER_GUILD   Draw maps of the guild of the specified player
  --overlap, --no-overlap       Draw map of the guild members with aura and all
                                active players (default: False)
  --path PATH                   Output path to put generated images

The maps generated by --guilds, --guild-name and --player-guild options, if a
guild is found, show the city of each member of the guild with:
  * estimated encountered provinces around the city which form an aura around
    it for one map.
  * name of the player and links between cities forming a minimum spanning
    tree with Prim's algorithm.

json file parsed has the following structure:
{
    player1_id: {
                    'name': player1 name,
                    'x': column position,
                    'y': row position,
                    'ghost': boolean, # if the city has the same position as you
                    'active_period': 35 - nb of days since last activity
                    'guild_id': guild identifier,   # if player is member of a guild
                    'guild_name': name of the guild,# if player is member of a guild
                    'encounter': encounter score
                },
    player2_id: {...},
    player3_id: {...},
    ...
    playerN_id: {...}
}

For example:
{
    '680592': {
                'active_period': 33,
                'encounter': 45689,
                'ghost': False,
                'guild_id': 35864,
                'guild_name': "Les pti Ros'ours",
                'name': 'salvinaantoineyann',
                'x': -49,
                'y': 118
              },
    '717296': {
                'active_period': 35,
                'encounter': 28152,
                'ghost': False,
                'guild_id': 35864,
                'guild_name': "Les pti Ros'ours",
                'name': 'AStriiid',
                'x': -91,
                'y': -35
              },
    '460382': {
                'active_period': 0,
                'encounter': 5795,
                'ghost': True,
                'guild_id': 35864,
                'guild_name': "Les pti Ros'ours",
                'name': 'EnchantedUruk',
                'x': -91,
                'y': -35
              },
    '257765': {
                'active_period": 35,
                'encounter': 68696,
                'ghost': False,
                'guild_id': 6828,
                'guild_name': 'Eternity',
                'name': 'The Bazic Floppy',
                'x': 109,
                'y': 7
              },
    '162906': {
                'active_period': 0,
                'encounter': 69540,
                'ghost': False,
                'name': 'Igorlegore',
                'x': 36,
                'y': 87
              }
}

Notes on data retrieval:
To get the location of a city, you'll have to open your web developper tools to
inspect 'POST' responses when visiting a city. The object you are looking for has
"visitPlayer" as requestMethod. Inside the 'other_player' field contained by
the responseData one, there is a 'location' field showing coordinates 'r' and
'q'. Set x with the 'r' value and y with the 'q' value. On the world map, 'r'
grows to the east (assuming east is on the right side and west on the left)
and 'q' grows to the south. The encounter score can be found hovering the player
score either in the ranking list or in the player's city.
As for getting your own coordinates, one way is to look for the json object
from the 'POST' response when opening the world map with the requestMethod
'fetchInitialWorldMapData'. You'll find a field 'player_world_map_area_vo' in
the responseData containing an array of 'provinces' : 6 regular one and 3 cities
one of which is yours. Look for the name to verify, and get the 'r' and 'q'
values associated with.

Some of the generated maps can be retrieved on https://tinyurl.com/galaxie-felyndral
